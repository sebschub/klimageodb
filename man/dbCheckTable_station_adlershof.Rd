% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/db_correction.R
\name{dbCheckTable_station_adlershof}
\alias{dbCheckTable_station_adlershof}
\title{Check data in the \code{station_adlershof} table and flag bad data points}
\usage{
dbCheckTable_station_adlershof(conn, start_datetime = NULL,
  end_datetime = NULL, md_id, qf_id_good = 1, qf_id_bad = 10)
}
\arguments{
\item{conn}{Database connection.}

\item{start_datetime}{Start date and time as a single POSIXct value.}

\item{end_datetime}{End date and time as a single POSIXct value.}

\item{md_id}{Integer vector of measurand ID.}

\item{qf_id_good}{Integer value with 1 <= qf_id_good <= 9 that will be
written to the non-selected points indicating value ok.}

\item{qf_id_bad}{Integer value with qf_id_bad >= 10 that will be written to
the selected points indicating value not ok and incorrectable.}
}
\description{
This function allows to interactively select bad data points of a selected
\code{md_id} and a period defined by \code{start_datetime} and
\code{end_datetime}. This points will be flagged with the quality flag
\code{qf_id_bad} and \code{NA} values in \code{station_adlershof_correcting}
while the rest of the points will be flagged with \code{qf_id_good}.
Currently, this function does not offer a way to write other values than
\code{NA} into \code{station_adlershof_correcting}; it is only meant for the
case when the data is not correctable.
}
\details{
The data of the selected \code{md_id} and period is plotted unless some
correcting entries in \code{station_adlershof_correcting} already refer to
the selected data; in this case the function is aborted. Click on the bad
points in the plot. These points will be marked with \code{qf_id_bad} and
corresponding \code{NA} values are written to
\code{station_adlershof_correcting}, while the rest is marked with
\code{qf_id_good}. The bad points will be written to the terminal; you will
have to confirm that the respective quality flags will be written. If there
are already some quality flags set in the data, you will have to confirm to
overwrite them.
}
\examples{
\dontrun{
library(lubridate)

con <- dbConnect_klimageo(user = "klimageo_1")

start_datetime <- ymd_h("2018-12-17 00")
end_datetime <- ymd_h("2019-01-01 00")

# air temperature
dbCheckTable_station_adlershof(con, md_id = 5,
                               start_datetime = start_datetime,
                               end_datetime = end_datetime)
dbCheckTable_station_adlershof(con, md_id = 7,
                               start_datetime = start_datetime,
                               end_datetime = end_datetime)
dbCheckTable_station_adlershof(con, md_id = 9,
                               start_datetime = start_datetime,
                               end_datetime = end_datetime)
dbDisconnect(con)
}
}
